create or replace PROCEDURE LLENAR_BASE
IS
  CURSOR DATOS_TMP IS SELECT * FROM TEMPORAL ORDER BY FECHA ASC;
  DATOS_TABLAS DATOS_TMP%ROWTYPE;
  EXISTE INTEGER;
  ID_TEMPORADA INTEGER;
  ID_JORNADA INTEGER;
  ID_VISITANTE INTEGER;
  ID_LOCAL INTEGER;
  PUNTOS_VICTORIA VARCHAR2(3);
  PUNTOS_EMPATE INTEGER;
  EDICION INTEGER;

  BEGIN

    OPEN DATOS_TMP;
    LOOP
      FETCH DATOS_TMP INTO DATOS_TABLAS;
      EXIT WHEN DATOS_TMP%NOTFOUND;
      --GUARDAMOS ID DE LA TEMPORADA DEL REGISTRO QUE VAMOS A INSERTAR
      SELECT TMP.ID_TEMPORADA INTO ID_TEMPORADA FROM TEMPORADA TMP WHERE TMP.AÑO_INICIO = DATOS_TABLAS.INICIO_ANIO AND TMP.AÑO_FINALIZA = DATOS_TABLAS.FIN_ANIO;
      --GUARDAMOS EL ID DEL EQUIPO LOCAL Y VISITANTE QUE VAMOS A INGRESAR
      SELECT EQ.ID_EQUIPO INTO ID_LOCAL FROM EQUIPO EQ WHERE EQ.NOMBRE_EQUIPO = DATOS_TABLAS.EQUIPOLOCAL;
      DBMS_OUTPUT.PUT_LINE ('ID LOCAL: ' || ID_LOCAL);

      SELECT EQ.ID_EQUIPO INTO ID_VISITANTE FROM EQUIPO EQ WHERE EQ.NOMBRE_EQUIPO = DATOS_TABLAS.VISITANTE;
      DBMS_OUTPUT.PUT_LINE ('ID visitante: ' || ID_VISITANTE);
      --VERIFICAMOS SI EXISTE EL REGISTRO DE LA JORNADA QUE VAMOS A INSERTAR Y SE GUARDA EN LA VARIABLE 'EXISTE'
      SELECT COUNT(J.ID_JORNADA) INTO EXISTE FROM JORNADA J
      WHERE J.NO_JORNADA = DATOS_TABLAS.JORNADA
      AND J.TEMPORADA_ID_TEMPORADA = ID_TEMPORADA;

      /*SI NO EXISTE EL REGISTRO ENTONCES LO CREAMOS*/

      IF EXISTE = 0 THEN
        INSERT INTO JORNADA(NO_JORNADA, TEMPORADA_ID_TEMPORADA)
        VALUES(DATOS_TABLAS.JORNADA, ID_TEMPORADA);
      END IF;

      --DESPUES DE INSERTAR EL DATO COLOCAMOS EXISTE = 0
      EXISTE := 0;
      /*OBTENEMOS EL ID DE LA JORNDADA Y LO GUARDAMOS EN LA VARIABLE 
      ID_JORNADA*/
      SELECT MAX(J.ID_JORNADA) INTO ID_JORNADA  FROM JORNADA J;

      /*OBTENEMOS EL PUNTAJE POR VICTORIA O EMPEATE DEPENDIENDO DE LA TEMPORADA*/
      DBMS_OUTPUT.PUT_LINE ('Temporada: ' || ID_TEMPORADA);

       SELECT TMP.PTS_GANADOR INTO PUNTOS_VICTORIA  FROM temporada TMP WHERE TMP.AÑO_INICIO = DATOS_TABLAS.INICIO_ANIO AND TMP.AÑO_FINALIZA = DATOS_TABLAS.FIN_ANIO;
       DBMS_OUTPUT.PUT_LINE ('PUNTOS_Victoria ' || puntos_victoria);

        
       SELECT TMP.PTS_GANADOR INTO PUNTOS_EMPATE FROM TEMPORADA TMP WHERE TMP.AÑO_INICIO = DATOS_TABLAS.INICIO_ANIO AND TMP.AÑO_FINALIZA = DATOS_TABLAS.FIN_ANIO;
       DBMS_OUTPUT.PUT_LINE ('PUNTOS_EMPATE ' || puntos_empate);

       /*OBTENEMOS LA EDICION DE LA TEMPORADA*/
       SELECT TMP.EDICION INTO EDICION FROM TEMPORADA TMP WHERE TMP.AÑO_INICIO = DATOS_TABLAS.INICIO_ANIO AND TMP.AÑO_FINALIZA = DATOS_TABLAS.FIN_ANIO;
        DBMS_OUTPUT.PUT_LINE ('EDICION ' || EDICION);
      /*BUSCAMOS EL REGISTRO DEL PARTIDO Y SI EXISTE O NO, LO GUARDAMOS EN LA VARIABLE EXISTE*/

      SELECT COUNT(PAR.ID_PARTIDO) INTO EXISTE FROM PARTIDO PAR
      WHERE PAR.EQ_LOCAL = ID_LOCAL
      AND PAR.VISITANTE = ID_VISITANTE
      AND PAR.JORNADA_ID_JORNADA = ID_JORNADA;

      /*SI NO EXISTE EL REGISTRO ENTONCES LO CREAMOS*/

      IF EXISTE = 0 THEN
         --VICTORIA DEL LOCAL
        IF DATOS_TABLAS.GOLESLOCAL > DATOS_TABLAS.GOLESVISITA THEN

            /*Verificamos la jornada 31 de la edicion 84 en donde le quitan los puntos al almeria por impago de un jugador*/
            IF DATOS_TABLAS.JORNADA = 31 AND EDICION = 84 AND ID_LOCAL = 5  THEN
                INSERT INTO PARTIDO(GOLES_LOCAL, GOLES_VISITA, PTS_LOCAL,PTS_VISITANTE, EQ_LOCAL, VISITANTE, FECHA,JORNADA_ID_JORNADA)
                VALUES(DATOS_TABLAS.GOLESLOCAL, DATOS_TABLAS.GOLESVISITA,0,0,ID_LOCAL,ID_VISITANTE, DATOS_TABLAS.FECHA, ID_JORNADA);
            ELSE
                INSERT INTO PARTIDO(GOLES_LOCAL, GOLES_VISITA, PTS_LOCAL,PTS_VISITANTE, EQ_LOCAL, VISITANTE, FECHA,JORNADA_ID_JORNADA)
                VALUES(DATOS_TABLAS.GOLESLOCAL, DATOS_TABLAS.GOLESVISITA,PUNTOS_VICTORIA,0,ID_LOCAL,ID_VISITANTE,DATOS_TABLAS.FECHA,ID_JORNADA);
            END IF;
        --VICTORIA DEL VISITANTE
        ELSIF DATOS_TABLAS.GOLESLOCAL < DATOS_TABLAS.GOLESVISITA THEN
            /*Verificamos la edicion 49 y jornada 31 en donde se le quitan 3 puntos al salamanca por amaño de partido*/
            IF DATOS_TABLAS.JORNADA = 31 AND EDICION = 49 AND ID_VISITANTE = 55    THEN
                INSERT INTO PARTIDO(GOLES_LOCAL, GOLES_VISITA, PTS_LOCAL,PTS_VISITANTE, EQ_LOCAL, VISITANTE, FECHA,JORNADA_ID_JORNADA)
                VALUES(DATOS_TABLAS.GOLESLOCAL, DATOS_TABLAS.GOLESVISITA,0,0,ID_LOCAL,ID_VISITANTE,DATOS_TABLAS.FECHA,ID_JORNADA);
            ELSE        
                INSERT INTO PARTIDO(GOLES_LOCAL, GOLES_VISITA, PTS_LOCAL,PTS_VISITANTE, EQ_LOCAL, VISITANTE, FECHA,JORNADA_ID_JORNADA)
                VALUES(DATOS_TABLAS.GOLESLOCAL, DATOS_TABLAS.GOLESVISITA,0,PUNTOS_VICTORIA,ID_LOCAL,ID_VISITANTE,DATOS_TABLAS.FECHA,ID_JORNADA);
            END IF;
        --EMPATE
        ELSE
            /*Verificamos la jornada 16 en donde se le quita un punto al racing de santander por haber alineado simultaneamente a cuatro
            jugadores extracomunitarios en el partido contra el Osasuna*/
            IF DATOS_TABLAS.JORNADA = 16 AND EDICION = 73 AND ID_LOCAL = 47   THEN
                INSERT INTO PARTIDO(GOLES_LOCAL, GOLES_VISITA, PTS_LOCAL,PTS_VISITANTE, EQ_LOCAL, VISITANTE, FECHA,JORNADA_ID_JORNADA)
                VALUES(DATOS_TABLAS.GOLESLOCAL, DATOS_TABLAS.GOLESVISITA,-1,0,ID_LOCAL,ID_VISITANTE,DATOS_TABLAS.FECHA,ID_JORNADA);
            ELSE 
                INSERT INTO PARTIDO(GOLES_LOCAL, GOLES_VISITA, PTS_LOCAL,PTS_VISITANTE, EQ_LOCAL, VISITANTE, FECHA,JORNADA_ID_JORNADA)
                VALUES(DATOS_TABLAS.GOLESLOCAL, DATOS_TABLAS.GOLESVISITA,PUNTOS_EMPATE,PUNTOS_EMPATE,ID_LOCAL,ID_VISITANTE,DATOS_TABLAS.FECHA,ID_JORNADA);
            END IF;
        END IF;
      -- COLOCAMOS EXISTE = 0
     END IF;
     EXISTE := 0;
    END LOOP;

  END;


--CREAR VISTA PARA COMPARAR DATOS
CREATE VIEW comparacion AS
SELECT P.ID_PARTIDO, P.FECHA, E.NOMBRE_EQUIPO EQ_LOCAL, P.GOLES_LOCAL, P.GOLES_VISITA, E2.NOMBRE_EQUIPO VISITA, J.NO_JORNADA, T."AÑO_INICIO", T."AÑO_FINALIZA"
FROM PARTIDO P, EQUIPO E, JORNADA J, TEMPORADA T, EQUIPO E2
WHERE p.eq_local= e.id_equipo
AND p.visitante = e2.id_equipo
AND p.jornada_id_jornada = j.id_jornada
AND j.temporada_id_temporada = t.id_temporada
GROUP BY p.id_partido, p.fecha, e.nombre_equipo, e2.nombre_equipo, p.goles_visita, p.goles_local, e.nombre_equipo, j.no_jornada, T."AÑO_INICIO", T."AÑO_FINALIZA"
ORDER BY p.id_partido DESC;

--COMPARANDO DATOS
SELECT TEMPORAL.*, 'ELIMINADOS' estatus
    FROM TEMPORAL
    WHERE NOT EXISTS ( SELECT * FROM COMPARACION
    WHERE
    TEMPORAL.FECHA = COMPARACION.FECHA AND
    TEMPORAL.EQUIPOLOCAL = COMPARACION.EQ_LOCAL AND
    TEMPORAL.VISITANTE = COMPARACION.VISITA AND
    TEMPORAL.GOLESLOCAL = COMPARACION.GOLES_LOCAL AND
    TEMPORAL.GOLESVISITA = COMPARACION.GOLES_VISITA
    )

-----------------------
--TABLA DE POSICIONES--
-----------------------

SELECT E.nombre_equipo EQUIPO, SUM(P.PTS_LOCAL+P.PTS_VISITANTE) PUNTOS, COUNT(E.nombre_equipo) PJ
FROM EQUIPO E, PARTIDO P
WHERE P.eq_local = E.id_equipo
AND P.visitante = E.id_equipo
GROUP BY EQUIPO, PUNTOS, PJ
ORDER BY PUNTOS DESC;


SELECT 
    t.id,  
    t.nome AS Equipo , 
    (SUM(
        CASE WHEN 
        (g.hometeam = t.id AND g.homegoals > g.awaygoals ) OR ( g.awayteam = t.id AND g.awaygoals > g.homegoals) THEN 
        3 
        ELSE 0 
        END) + 
        SUM(CASE WHEN ( g.hometeam = t.id OR g.awayteam = t.id ) AND ( g.homegoals = g.awaygoals ) THEN 
        1 ELSE 0 END)) AS PTS ,  

    SUM(CASE WHEN ( g.hometeam = t.id OR g.awayteam = t.id ) THEN 1 ELSE 0 END) AS PJ ,  

    SUM(CASE WHEN ( g.hometeam = t.id AND g.homegoals > g.awaygoals ) OR ( g.awayteam = t.id AND g.awaygoals > g.homegoals ) THEN 
    1 ELSE 0 END) AS V , 
    SUM(CASE WHEN ( g.hometeam = t.id OR g.awayteam = t.id ) AND g.homegoals = g.awaygoals THEN 
    1 
    ELSE 0 
    END) AS E ,  
    SUM(CASE WHEN ( g.hometeam = t.id AND g.homegoals < g.awaygoals ) OR ( g.awayteam = t.id AND g.awaygoals < g.homegoals ) THEN 
    1 
    ELSE 
    0 
    END) AS D ,  
    COALESCE(SUM(CASE WHEN (g.hometeam = t.id) THEN 
    g.homegoals
     WHEN (g.awayteam = t.id) THEN g.awaygoals END),0) AS GF , 
    COALESCE(SUM(CASE WHEN (g.hometeam = t.id) THEN 
    g.awaygoals WHEN (g.awayteam = t.id) THEN g.homegoals END),0) AS GC ,  
    COALESCE((SUM(CASE WHEN (g.hometeam = t.id) 
    THEN g.homegoals WHEN (g.awayteam = t.id) THEN 
    g.awaygoals END) - SUM(CASE WHEN (g.hometeam = t.id) THEN 
    g.awaygoals WHEN (g.awayteam = t.id) THEN g.homegoals END)),0) AS DIF 
FROM teams t  
    LEFT OUTER JOIN games g ON t.id IN (g.hometeam,g.awayteam) 
WHERE g.torneo_id = '1' AND g.homegoals <> '' 
GROUP BY t.id, t.nome 
ORDER BY PTS DESC, V DESC, DIF DESC, GF DESC, PJ ASC, t.nome ASC



SELECT  E.nombre_equipo EQUIPO, SUM(P.PTS_LOCAL+p.pts_visitante) PUNTOS, COUNT(p.id_partido) PJ, SUM(p.goles_local) goles
FROM EQUIPO E LEFT outer join PARTIDO P JORNADA J, TEMPORADA T
WHERE P.eq_local = E.id_equipo
AND P.visitante = E2.id_equipo
AND p.jornada_id_jornada = j.id_jornada
AND j.temporada_id_temporada = t.id_temporada
AND t.edicion = 49
GROUP BY E.nombre_equipo, p.pts_local, e.id_equipo, p.pts_visitante, p.goles_local, p.goles_visita
ORDER BY PUNTOS DESC;

SELECT e.id_equipo, E.nombre_equipo EQUIPO, SUM(P.PTS_LOCAL) PTS_LOCAL, SUM(P.PTS_VISITANTE) PTS_VISITANTE, COUNT(p.id_partido) PJ, SUM(p.goles_local) goles
FROM EQUIPO E, EQUIPO E2, PARTIDO P, JORNADA J, TEMPORADA T
WHERE P.eq_local = E.id_equipo
AND P.visitante = E2.id_equipo
AND p.jornada_id_jornada = j.id_jornada
AND j.temporada_id_temporada = t.id_temporada
AND t.edicion = 49
GROUP BY e.nombre_equipo, e.id_equipo
;

SELECT e.nombre_equipo EQUIPO, 
COUNT(*) PARTIDOS, 
COUNT( CASE WHEN GOLES_LOCAL > GOLES_VISITA THEN 1 END) GANADOS,
COUNT( CASE WHEN GOLES_VISITA > GOLES_LOCAL THEN 1 END) PERDIDOS,
COUNT( CASE WHEN GOLES_LOCAL = GOLES_VISITA THEN 1 END) EMPATES,
SUM(GOLES_LOCAL) GF,
SUM(GOLES_VISITA) GC,
(SUM(CASE WHEN GOLES_LOCAL > GOLES_VISITA THEN t.pts_ganador END) +  SUM(CASE WHEN GOLES_LOCAL = GOLES_VISITA  THEN t.pts_empate END) ) PTS
FROM 
( SELECT
    "A3"."EQ_LOCAL"        "TEAM",
    "A3"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A3"."GOLES_VISITA"    "GOLES_VISITA",
    "A3"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A3"."PTS_VISITANTE" "PUNTOS_VISITANTE", 
    "A3"."FECHA" "FECHA",
    "A3"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A3"
UNION ALL
 SELECT
    "A2"."VISITANTE"       "VISITANTE",
    "A2"."GOLES_VISITA"    "GOLES_VISITA",
    "A2"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A2"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A2"."PTS_VISITANTE" "PUNTOS_VISITANTE",
    "A2"."FECHA" "FECHA",
    "A2"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A2"
)A , JORNADA J, EQUIPO E, TEMPORADA T 
WHERE A.JORNADA = j.id_jornada
AND j.temporada_id_temporada = t.id_temporada
AND e.id_equipo = A."TEAM"
AND t."AÑO_INICIO" = 2019
group by e.nombre_equipo  
ORDER BY PTS DESC;


--CONSULTA PARA CREAR TABLA DE DATOS DE DONDE SACAR LOS PUNTOS Y RESULTADOS

SELECT
    "A3"."EQ_LOCAL"        "TEAM",
    "A3"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A3"."GOLES_VISITA"    "GOLES_VISITA",
    "A3"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A3"."PTS_VISITANTE" "PUNTOS_VISITANTE", 
    "A3"."FECHA" "FECHA",
    "A3"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A3"
UNION ALL
 SELECT
    "A2"."VISITANTE"       "VISITANTE",
    "A2"."GOLES_VISITA"    "GOLES_VISITA",
    "A2"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A2"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A2"."PTS_VISITANTE" "PUNTOS_VISITANTE",
    "A2"."FECHA" "FECHA",
    "A2"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A2";

--CREAR 


SELECT TEAM, 
COUNT(*) PARTIDOS, 
COUNT( CASE WHEN GOLES_LOCAL > GOLES_VISITA THEN 1 END) GANADOS,
COUNT( CASE WHEN GOLES_VISITA > GOLES_LOCAL THEN 1 END) PERDIDOS,
COUNT( CASE WHEN GOLES_LOCAL = GOLES_VISITA THEN 1 END) EMPATES,
SUM(GOLES_LOCAL) GF,
SUM(GOLES_VISITA) GC,
SUM(PUNTOS_LOCAL+ PUNTOS_VISITANTE) PTS
FROM 
( SELECT
    "A3"."EQ_LOCAL"        "TEAM",
    "A3"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A3"."GOLES_VISITA"    "GOLES_VISITA",
    "A3"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A3"."PTS_VISITANTE" "PUNTOS_VISITANTE", 
    "A3"."FECHA" "FECHA",
    "A3"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A3"
UNION ALL
 SELECT
    "A2"."VISITANTE"       "VISITANTE",
    "A2"."GOLES_VISITA"    "GOLES_VISITA",
    "A2"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A2"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A2"."PTS_VISITANTE" "PUNTOS_VISITANTE",
    "A2"."FECHA" "FECHA",
    "A2"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A2"
)A , JORNADA J, EQUIPO E, TEMPORADA T group by TEAM  
ORDER BY PTS DESC;



------


SELECT EQUIPO, 
PARTIDOS,
GANADOS,
EMPATES,
PERDIDOS,
(CASE WHEN EQUIPO='Salamanca' AND TMP= '1979' THEN GF-3
ELSE
GF
END) GF,
GC,
(CASE WHEN EQUIPO='Salamanca' AND TMP= '1979' THEN (GF-3) -(GC)
ELSE
GF-GC
END) DG,
(CASE WHEN EQUIPO='CD Málaga' AND TMP = '1979' THEN PTS-3 
WHEN EQUIPO='AD Almería' AND TMP = '1979' THEN PTS+2
ELSE PTS END) PTS
FROM
(
SELECT e.nombre_equipo EQUIPO, 
COUNT(*) PARTIDOS, 
COUNT( CASE WHEN GOLES_LOCAL > GOLES_VISITA THEN 1 END) GANADOS,
COUNT( CASE WHEN GOLES_VISITA > GOLES_LOCAL THEN 1 END) PERDIDOS,
COUNT( CASE WHEN GOLES_LOCAL = GOLES_VISITA THEN 1 END) EMPATES,
SUM(GOLES_LOCAL) GF,
SUM(GOLES_VISITA) GC,
(SUM(GOLES_LOCAL)-SUM(GOLES_VISITA)) DG,
(SUM(CASE WHEN GOLES_LOCAL > GOLES_VISITA THEN PUNTOS_LOCAL END) +  SUM(CASE WHEN GOLES_LOCAL < GOLES_VISITA  THEN PUNTOS_LOCAL END) 
+ SUM(CASE WHEN GOLES_LOCAL = GOLES_VISITA  THEN PUNTOS_LOCAL END) ) PTS,
t."AÑO_INICIO" TMP
FROM 
( SELECT
    "A3"."EQ_LOCAL"        "TEAM",
    "A3"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A3"."GOLES_VISITA"    "GOLES_VISITA",
    "A3"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A3"."PTS_VISITANTE" "PUNTOS_VISITANTE", 
    "A3"."FECHA" "FECHA",
    "A3"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A3"
UNION ALL
 SELECT
    "A2"."VISITANTE"       "VISITANTE",
    "A2"."GOLES_VISITA"    "GOLES_VISITA",
    "A2"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A2"."PTS_VISITANTE" "PUNTOS_VISITANTE",
    "A2"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A2"."FECHA" "FECHA",
    "A2"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A2"
)A , JORNADA J, EQUIPO E, TEMPORADA T 
WHERE A.JORNADA = j.id_jornada
AND j.temporada_id_temporada = t.id_temporada
AND e.id_equipo = A."TEAM"
AND t."AÑO_INICIO" = 1995
AND FECHA <= '04/06/1995'
group by e.nombre_equipo, t."AÑO_INICIO"  
)
ORDER BY PTS DESC, DG DESC;


SELECT *
FROM
(SELECT
    "A3"."EQ_LOCAL"        "TEAM",
    "A3"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A3"."GOLES_VISITA"    "GOLES_VISITA",
    "A3"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A3"."PTS_VISITANTE" "PUNTOS_VISITANTE", 
    "A3"."FECHA" "FECHA",
    "A3"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A3"
UNION ALL
 SELECT
    "A2"."VISITANTE"       "VISITANTE",
    "A2"."GOLES_VISITA"    "GOLES_VISITA",
    "A2"."GOLES_LOCAL"     "GOLES_LOCAL",
    "A2"."PTS_LOCAL" "PUNTOS_LOCAL",
    "A2"."PTS_VISITANTE" "PUNTOS_VISITANTE",
    "A2"."FECHA" "FECHA",
    "A2"."JORNADA_ID_JORNADA" "JORNADA"
FROM
    "LALIGA"."PARTIDO" "A2")
WHERE TEAM = 29
ORDER BY FECHA DESC;
select * from partido where visitante = 29 order by fecha desc;


SELECT * FROM TEMPORADA T, JORNADA j WHERE j.id_jornada = 1494 AND t.id_temporada = j.temporada_id_temporada ;


SELECT count(*) FROM partido p, jornada j, temporada t
where p.jornada_id_jornada = j.id_jornada
AND j.temporada_id_temporada = t.id_temporada
AND t.edicion = 89;


SELECT e1.nombre_equipo, p.goles_local, e2.nombre_equipo, p.goles_visita, 
p.pts_local, p.pts_visitante, p.fecha, t.año_inicio, t.edicion, j.no_jornada 
FROM equipo e1, equipo e2, partido p, jornada j, temporada t
where p.jornada_id_jornada = j.id_jornada 
AND j.temporada_id_temporada = t.id_temporada
AND e1.id_equipo = p.eq_local
AND e2.id_equipo = p.visitante
AND t.edicion = 87
order by p.fecha asc;


-----eliminar secuencias y triggers

DROP SEQUENCE jornada_id_jornada_seq;
DROP SEQUENCE partido_id_partido_seq;
CREATE SEQUENCE jornada_id_jornada_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER jornada_id_jornada_trg BEFORE
    INSERT ON jornada
    FOR EACH ROW
    WHEN ( new.id_jornada IS NULL )
BEGIN
    :new.id_jornada := jornada_id_jornada_seq.nextval;
END;
/

CREATE SEQUENCE partido_id_partido_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER partido_id_partido_trg BEFORE
    INSERT ON partido
    FOR EACH ROW
    WHEN ( new.id_partido IS NULL )
BEGIN
    :new.id_partido := partido_id_partido_seq.nextval;
END;
/